import org.junit.jupiter.api.Test;import static org.junit.jupiter.api.Assertions.*;class BoardTest {    @Test    void createRandomBoard() {        int width = 50;        int height = 50;        int numMines = 50;        var b = new Board(width, height, numMines);        assertEquals(Board.GameState.START, b.getState());        for (int i = 0; i < height; ++i) {            for (int j = 0; j < width; ++j) {                assertEquals(Cell.State.HIDDEN, b.getCellState(j, i));            }        }    }    int exampleLayout1Width = 5;    int exampleLayout1Height = 7;    int[] exampleLayout1 = new int[]            {0,0,0,0,0,             0,0,0,0,0,             0,0,1,0,0,             0,0,0,0,0,             0,0,1,0,0,             0,0,0,0,0,             0,0,0,0,0};    int exampleLayout2Width = 9;    int exampleLayout2Height = 9;    int[] exampleLayout2 = new int[]            {0, 0, 0, 0, 0, 0, 0, 0, 0,             0, 0, 0, 0, 0, 0, 0, 0, 0,             0, 0, 0, 1, 0, 0, 1, 0, 0,             0, 0, 0, 0, 1, 1, 0, 0, 0,             0, 0, 0, 0, 1, 1, 0, 0, 0,             0, 0, 0, 0, 1, 1, 0, 0, 0,             0, 0, 0, 1, 0, 0, 1, 0, 0,             0, 0, 0, 0, 0, 0, 0, 0, 0,             0, 0, 0, 0, 0, 0, 0, 0, 0};    @Test    void clickingMineLosesGame() {        var b = new Board(exampleLayout2Width, exampleLayout2Height, exampleLayout2);        b.sweep(3, 2);        assertEquals(Board.GameState.LOSE, b.getState());        String result = "_________\n" +                        "__111111_\n" +                        "__1#33*1_\n" +                        "__13**31_\n" +                        "___3**3__\n" +                        "__13**31_\n" +                        "__1*33*1_\n" +                        "__111111_\n" +                        "_________\n";        assertEquals(result, Game.stringDisplay(b));    }    @Test    void clickingNumberRevealsNumber() {        var b = new Board(exampleLayout1Width, exampleLayout1Height, exampleLayout1);        b.sweep(2, 3);        assertEquals(Board.GameState.IN_PROGRESS, b.getState());        var result = "~~~~~\n" +                     "~~~~~\n" +                     "~~~~~\n" +                     "~~2~~\n" +                     "~~~~~\n" +                     "~~~~~\n" +                     "~~~~~\n";        assertEquals(result, Game.stringDisplay(b));    }    @Test    void blanksRevealNeighborBlanks() {        var b = new Board(exampleLayout1Width, exampleLayout1Height, exampleLayout1);        b.sweep(0,0);        assertEquals(Board.GameState.IN_PROGRESS, b.getState());        var result = "_____\n" +                     "_111_\n" +                     "_1~1_\n" +                     "_2~2_\n" +                     "_1~1_\n" +                     "_111_\n" +                     "_____\n";        assertEquals(result, Game.stringDisplay(b));    }    @Test    void clickingFinalSquareWins() {        var b = new Board(exampleLayout1Width, exampleLayout1Height, exampleLayout1);        b.sweep(0,0);        b.sweep(2, 3);        assertEquals(Board.GameState.WIN, b.getState());        var result2 = "_____\n" +                      "_111_\n" +                      "_1*1_\n" +                      "_222_\n" +                      "_1*1_\n" +                      "_111_\n" +                      "_____\n";        assertEquals(result2, Game.stringDisplay(b));    }    @Test    void clickingARevealedSquareDoesNothing() {        var b = new Board(exampleLayout1Width, exampleLayout1Height, exampleLayout1);        b.sweep(0,0);        b.sweep(4,6);        b.sweep(0,6);        b.sweep(4,0);        assertEquals(Board.GameState.IN_PROGRESS, b.getState());        b.sweep(2,3);        assertEquals(Board.GameState.WIN, b.getState());    }    @Test    void togglingMarkingsWorks() {        var b = new Board(3, 1, new int[] {1,1,0});        b.toggleMark(2,0);        b.toggleMark(1,0);        b.toggleMark(1,0);        String result = "~?P\n";        assertEquals(result, Game.stringDisplay(b));        assertEquals(Board.GameState.IN_PROGRESS, b.getState());    }    @Test    void cantClickFlags() {        var b = new Board(2, 1, new int[]{1, 0});        b.toggleMark(0, 0);        for (int i = 0; i < 100; ++i) {            b.sweep(0, 0);        }        assertEquals(Board.GameState.IN_PROGRESS, b.getState());        b.sweep(1, 0);        assertEquals(Board.GameState.WIN, b.getState());    }    @Test    void canClickQMarks() {        var b = new Board(2, 1, new int[]{1, 0});        b.toggleMark(0, 0);        b.toggleMark(0, 0);        assertEquals(Board.GameState.IN_PROGRESS, b.getState());        b.sweep(0,0);        assertEquals(Board.GameState.LOSE, b.getState());    }    @Test    void clearQMarksWhenSafeCellsAreCleared() {        var b = new Board(4, 1, new int[]{0, 0, 0, 1});        b.toggleMark(1,0);        b.toggleMark(1,0);        b.sweep(0,0);        assertEquals(Board.GameState.WIN, b.getState());        assertEquals("__1*\n", Game.stringDisplay(b));    }    @Test    void doNotClearFlagsWhenSafeCellsAreCleared() {        var b = new Board(4, 1, new int[]{0, 0, 0, 1});        b.toggleMark(1,0);        b.sweep(0,0);        assertEquals("_P~~\n", Game.stringDisplay(b));        assertEquals(Board.GameState.IN_PROGRESS, b.getState());    }    @Test    void flagsGetMarkedWrong() {        var b = new Board(3, 1, new int[]{1, 1, 0});        b.toggleMark(1, 0);        assertEquals(Board.GameState.IN_PROGRESS, b.getState());        assertEquals("~P~\n", Game.stringDisplay(b));        b.sweep(0,0);        assertEquals(Board.GameState.LOSE, b.getState());        assertEquals("#X1\n", Game.stringDisplay(b));    }    @Test    void firstClickCantBeBomb() {        for (int i = 0; i < 100; ++i) {            var b = new Board(5, 5,24);            b.sweep(0,0);            assertEquals(Board.GameState.WIN, b.getState());        }    }}